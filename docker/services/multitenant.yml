services:
  # Separate databases for tenant isolation testing
  mysql-tenant-1:
    image: mysql:8.4
    container_name: customer-dashboard-mysql-tenant-1
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: tenant_1
      MYSQL_USER: tenant_user
      MYSQL_PASSWORD: tenant_password
    volumes:
      - mysql_tenant_1_data:/var/lib/mysql
      - ../config/mysql/conf.d:/etc/mysql/conf.d
    ports:
      - "3307:3306"
    networks:
      - customer-dashboard

  mysql-tenant-2:
    image: mysql:8.4
    container_name: customer-dashboard-mysql-tenant-2
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: tenant_2
      MYSQL_USER: tenant_user
      MYSQL_PASSWORD: tenant_password
    volumes:
      - mysql_tenant_2_data:/var/lib/mysql
      - ../config/mysql/conf.d:/etc/mysql/conf.d
    ports:
      - "3308:3306"
    networks:
      - customer-dashboard

  # Redis clusters for distributed caching
  redis-cluster-1:
    image: redis:8-alpine
    container_name: customer-dashboard-redis-cluster-1
    command: redis-server --port 7010 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7010:7010"
    volumes:
      - redis_cluster_1_data:/data
    networks:
      - customer-dashboard

  redis-cluster-2:
    image: redis:8-alpine
    container_name: customer-dashboard-redis-cluster-2
    command: redis-server --port 7011 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7011:7011"
    volumes:
      - redis_cluster_2_data:/data
    networks:
      - customer-dashboard

  redis-cluster-3:
    image: redis:8-alpine
    container_name: customer-dashboard-redis-cluster-3
    command: redis-server --port 7012 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7012:7012"
    volumes:
      - redis_cluster_3_data:/data
    networks:
      - customer-dashboard

  # Load balancer for multi-instance testing
  nginx-lb:
    image: nginx:alpine
    container_name: customer-dashboard-nginx-lb
    volumes:
      - ./docker/nginx/load-balancer.conf:/etc/nginx/nginx.conf
    ports:
      - "8090:80"
    depends_on:
      - php-fpm
    networks:
      - customer-dashboard

volumes:
  mysql_tenant_1_data:
  mysql_tenant_2_data:
  redis_cluster_1_data:
  redis_cluster_2_data:
  redis_cluster_3_data:

networks:
  customer-dashboard:
