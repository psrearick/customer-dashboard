#!/bin/bash

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

PROJECT_NAME="customer-dashboard"

DEFAULT_SERVICES="mysql redis nginx php-fpm node"

build_compose_args() {
    local args=""
    for service in $DEFAULT_SERVICES; do
        if [ -f "docker/services/${service}.yml" ]; then
            args="$args -f docker/services/${service}.yml"
        else
            printf "%bError: Service file 'docker/services/${service}.yml' not found%b\n" "$RED" "$NC" >&2
            exit 1
        fi
    done
    echo "$args"
}

show_usage() {
    printf "%bCustomer Dashboard Environment Manager%b\n" "$BLUE" "$NC"
    echo ""
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    printf "%bCommands:%b\n" "$YELLOW" "$NC"
    echo "  up         Start the application"
    echo "  down       Stop the application"
    echo "  restart    Restart the application"
    echo "  logs       Show application logs"
    echo "  status     Show status of running containers"
    echo "  clean      Remove all containers, networks, and volumes"
    echo "  help       Show this help message"
    echo ""
    printf "%bOptions:%b\n" "$YELLOW" "$NC"
    echo "  -a, --attach      Run in foreground"
    echo "  -b, --build       Force rebuild of images"
    echo "  -f, --follow      Follow logs in real-time"
    echo ""
    printf "%bExamples:%b\n" "$YELLOW" "$NC"
    echo "  $0 up                     # Start application in background"
    echo "  $0 up -a                  # Start application in foreground"
    echo "  $0 logs -f                # Follow logs in real-time"
    echo "  $0 restart                # Restart application"
    echo "  $0 clean                  # Complete cleanup"
    echo ""
}

run_compose() {
    local command=$1
    shift
    local additional_args="$*"

    local compose_args
    compose_args=$(build_compose_args)
    local full_command="docker-compose -p $PROJECT_NAME $compose_args $command $additional_args"

    eval "$full_command"
}

show_status() {
    printf "%bCustomer Dashboard Status%b\n" "$BLUE" "$NC"
    echo ""

    local running_containers
    running_containers=$(docker ps --filter "label=com.docker.compose.project=$PROJECT_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "")

    if [ -z "$running_containers" ] || [ "$(echo "$running_containers" | wc -l | tr -d ' ')" -eq 1 ]; then
        printf "%bNo containers currently running%b\n" "$YELLOW" "$NC"
        echo ""
        echo "Start the application with: ./bin/app up"
    else
        printf "%bRunning containers:%b\n" "$GREEN" "$NC"
        echo "$running_containers"
        echo ""
        printf "%bApplication access:%b http://localhost\n" "$GREEN" "$NC"
    fi
}

clean_all() {
    printf "%bThis will remove all containers, networks, and volumes.%b\n" "$YELLOW" "$NC"
    printf "%bThis action cannot be undone!%b\n" "$RED" "$NC"
    echo ""
    printf "Are you sure? (y/N): "
    read -r REPLY

    case "$REPLY" in
        [Yy]|[Yy][Ee][Ss])
            printf "%bCleaning up...%b\n" "$BLUE" "$NC"
            run_compose "down" "--remove-orphans --volumes"
            docker container prune --filter "label=com.docker.compose.project=$PROJECT_NAME" -f 2>/dev/null || true
            docker network prune --filter "name=${PROJECT_NAME}" -f 2>/dev/null || true
            docker volume prune --filter "name=${PROJECT_NAME}" -f 2>/dev/null || true
            printf "%bCleanup complete!%b\n" "$GREEN" "$NC"
            ;;
        *)
            echo "Cancelled."
            ;;
    esac
}

ATTACH=false
BUILD=false
FOLLOW=false

while [ $# -gt 0 ]; do
    case $1 in
        up|down|restart|logs|build|pull)
            COMMAND=$1
            shift
            ;;
        status|clean|help)
            COMMAND=$1
            shift
            break
            ;;
        -a|--attach)
            ATTACH=true
            shift
            ;;
        -b|--build)
            BUILD=true
            shift
            ;;
        -f|--follow)
            FOLLOW=true
            shift
            ;;
        -*)
            printf "%bError: Unknown option %s%b\n" "$RED" "$1" "$NC" >&2
            show_usage
            exit 1
            ;;
        *)
            printf "%bError: Unknown argument %s%b\n" "$RED" "$1" "$NC" >&2
            show_usage
            exit 1
            ;;
    esac
done

case ${COMMAND:-} in
    status)
        show_status
        ;;
    clean)
        clean_all
        ;;
    help|"")
        show_usage
        ;;
    up)
        ADDITIONAL_ARGS=""
        [ "$ATTACH" = "false" ] && ADDITIONAL_ARGS="$ADDITIONAL_ARGS -d"
        [ "$BUILD" = "true" ] && ADDITIONAL_ARGS="$ADDITIONAL_ARGS --build"

        printf "%bStarting application...%b\n" "$GREEN" "$NC"
        run_compose "up" "$ADDITIONAL_ARGS"

        if [ "$DETACH" = "true" ]; then
            echo ""
            printf "%bApplication started!%b\n" "$GREEN" "$NC"
            printf "%bAccess: %bhttp://localhost\n" "$BLUE" "$NC"
        fi
        ;;
    down)
        printf "%bStopping application...%b\n" "$YELLOW" "$NC"
        run_compose "down"
        ;;
    restart)
        printf "%bRestarting application...%b\n" "$YELLOW" "$NC"
        run_compose "restart"
        ;;
    logs)
        ADDITIONAL_ARGS=""
        [ "$FOLLOW" = "true" ] && ADDITIONAL_ARGS="$ADDITIONAL_ARGS -f"
        run_compose "logs" "$ADDITIONAL_ARGS"
        ;;
    build)
        printf "%bBuilding application...%b\n" "$BLUE" "$NC"
        run_compose "build"
        ;;
    pull)
        printf "%bPulling images...%b\n" "$BLUE" "$NC"
        run_compose "pull"
        ;;
    *)
        printf "%bError: Unknown command '%s'%b\n" "$RED" "$COMMAND" "$NC" >&2
        show_usage
        exit 1
        ;;
esac