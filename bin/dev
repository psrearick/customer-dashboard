#!/bin/bash

# Laravel Development Helper Script
# Provides sail-like shortcuts for running commands in Docker containers
# Usage: ./bin/dev [command] [arguments...]

set -e

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to detect which PHP container is running
detect_php_container() {
    # Check for running PHP containers in order of preference
    local containers=("laravel-perf-php-fpm" "laravel-perf-frankenphp" "laravel-perf-octane")
    
    for container in "${containers[@]}"; do
        if docker ps --format '{{.Names}}' | grep -q "^${container}$"; then
            echo "$container"
            return 0
        fi
    done
    
    return 1
}

# Function to check if a container is running
is_container_running() {
    local container=$1
    docker ps --format '{{.Names}}' | grep -q "^${container}$"
}

# Function to run a command in the PHP container
run_in_php_container() {
    local container
    container=$(detect_php_container)
    
    if [ $? -ne 0 ]; then
        printf "%bError: No PHP container is running%b\n" "$RED" "$NC" >&2
        printf "%bStart a stack first with: ./bin/stack up [stack] -d%b\n" "$YELLOW" "$NC" >&2
        printf "%bAvailable stacks: traditional, frankenphp, octane, performance, enterprise, comparison, full%b\n" "$YELLOW" "$NC" >&2
        exit 1
    fi
    
    # Check if we need TTY allocation (for interactive commands)
    if [ -t 0 ]; then
        docker exec -it "$container" "$@"
    else
        docker exec "$container" "$@"
    fi
}

# Function to show usage
show_usage() {
    printf "%bLaravel Development Helper%b\n" "$BLUE" "$NC"
    echo ""
    echo "Usage: $0 [COMMAND] [ARGUMENTS...]"
    echo ""
    printf "%bAvailable Commands:%b\n" "$YELLOW" "$NC"
    echo "  php [args]        Run PHP commands"
    echo "  artisan [args]    Run Laravel Artisan commands"
    echo "  composer [args]   Run Composer commands"
    echo "  npm [args]        Run NPM commands"
    echo "  node [args]       Run Node.js commands"
    echo "  shell             Open an interactive shell in the PHP container"
    echo "  mysql             Connect to MySQL database"
    echo "  redis-cli         Connect to Redis"
    echo "  help              Show this help message"
    echo ""
    printf "%bExamples:%b\n" "$YELLOW" "$NC"
    echo "  $0 artisan migrate              # Run database migrations"
    echo "  $0 artisan tinker               # Start Laravel Tinker"
    echo "  $0 composer install             # Install PHP dependencies"
    echo "  $0 npm install                  # Install Node dependencies"
    echo "  $0 npm run dev                  # Start Vite dev server"
    echo "  $0 php --version                # Check PHP version"
    echo "  $0 shell                        # Open bash shell in container"
    echo "  $0 mysql                        # Connect to MySQL CLI"
    echo ""
    printf "%bContainer Detection:%b\n" "$YELLOW" "$NC"
    echo "This script automatically detects which PHP container is running:"
    echo "  - laravel-perf-php-fpm (traditional stack)"
    echo "  - laravel-perf-frankenphp (frankenphp stack)"
    echo "  - laravel-perf-octane (octane stack)"
    echo ""
}

# Main script logic
case "${1:-}" in
    php)
        shift
        run_in_php_container php "$@"
        ;;
    
    artisan)
        shift
        run_in_php_container php artisan "$@"
        ;;
    
    composer)
        shift
        run_in_php_container composer "$@"
        ;;
    
    npm)
        shift
        run_in_php_container npm "$@"
        ;;
    
    node)
        shift
        run_in_php_container node "$@"
        ;;
    
    shell|bash|sh)
        # Try bash first, fall back to sh if not available
        container=$(detect_php_container)
        if [ $? -ne 0 ]; then
            printf "%bError: No PHP container is running%b\n" "$RED" "$NC" >&2
            printf "%bStart a stack first with: ./bin/stack up [stack] -d%b\n" "$YELLOW" "$NC" >&2
            exit 1
        fi
        
        # Try bash first
        if docker exec "$container" which bash >/dev/null 2>&1; then
            docker exec -it "$container" bash
        else
            docker exec -it "$container" sh
        fi
        ;;
    
    mysql)
        if ! is_container_running "laravel-perf-mysql"; then
            printf "%bError: MySQL container is not running%b\n" "$RED" "$NC" >&2
            printf "%bStart a stack with MySQL support first%b\n" "$YELLOW" "$NC" >&2
            exit 1
        fi
        
        printf "%bConnecting to MySQL...%b\n" "$BLUE" "$NC"
        printf "%bPassword: password (or rootpassword for root)%b\n" "$YELLOW" "$NC"
        docker exec -it laravel-perf-mysql mysql -u laravel -p
        ;;
    
    mysql-root)
        if ! is_container_running "laravel-perf-mysql"; then
            printf "%bError: MySQL container is not running%b\n" "$RED" "$NC" >&2
            printf "%bStart a stack with MySQL support first%b\n" "$YELLOW" "$NC" >&2
            exit 1
        fi
        
        printf "%bConnecting to MySQL as root...%b\n" "$BLUE" "$NC"
        printf "%bPassword: rootpassword%b\n" "$YELLOW" "$NC"
        docker exec -it laravel-perf-mysql mysql -u root -p
        ;;
    
    redis-cli|redis)
        if ! is_container_running "laravel-perf-redis"; then
            printf "%bError: Redis container is not running%b\n" "$RED" "$NC" >&2
            printf "%bStart a stack with Redis support first%b\n" "$YELLOW" "$NC" >&2
            exit 1
        fi
        
        printf "%bConnecting to Redis...%b\n" "$BLUE" "$NC"
        docker exec -it laravel-perf-redis redis-cli
        ;;
    
    help|--help|-h|"")
        show_usage
        ;;
    
    *)
        printf "%bError: Unknown command '%s'%b\n" "$RED" "$1" "$NC" >&2
        echo ""
        show_usage
        exit 1
        ;;
esac