#!/bin/bash

set -e

GREEN=$'\033[0;32m'
YELLOW=$'\033[1;33m'
BLUE=$'\033[0;34m'
NC=$'\033[0m'

IMAGE_NAME="cd-python:latest"
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
PROJECT_ROOT=$(dirname "$SCRIPT_DIR")
DOCKERFILE_PATH="${PROJECT_ROOT}/docker/config/python/Dockerfile"

build_image() {
    echo "${BLUE}Building Docker image: ${IMAGE_NAME}...${NC}"
    docker build \
        --no-cache \
        -t "${IMAGE_NAME}" \
        -f "${DOCKERFILE_PATH}" \
        "${PROJECT_ROOT}"
    echo "${GREEN}Build complete.${NC}"
}

main() {
if [[ "$1" == "rebuild" || "$1" == "--rebuild" ]]; then
    build_image
    exit 0
fi

if [[ -z "$(docker images -q ${IMAGE_NAME})" ]]; then
    echo "${YELLOW}Image not found.${NC}"
    build_image
fi

SCRIPT_NAME="$1"
shift
SCRIPT_ARGS="$*"

echo "${BLUE}Running '${SCRIPT_NAME}'${NC}"
docker run --rm \
    -v "${PROJECT_ROOT}":/app \
    -v /var/run/docker.sock:/var/run/docker.sock \
    "${IMAGE_NAME}" "${SCRIPT_NAME}" "${SCRIPT_ARGS}"
echo "${GREEN}Run Complete${NC}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

